{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\src\\\\SearchOption.js\";\nimport React, { Component } from 'react'; // Imported BooksAPI for search option to work.\n\nimport * as BooksAPI from './BooksAPI';\nimport Book from './Book'; // Component responsible for searching books.\n\nclass SearchOption extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      query: '',\n      searchResults: [],\n      showNothing: false\n    };\n\n    this.search = event => {\n      const query = event.target.value.trim();\n      this.setState({\n        query: query\n      }); // If user typed then start the search.\n\n      if (query) {\n        BooksAPI.search(query).then(notInShelves => {\n          // If no error occurred proceed.\n          if (!notInShelves.error) {\n            // Compare shelves in order to display correct books.\n            notInShelves.forEach(newBook => {\n              this.props.books.forEach(onShelf => {\n                if (onShelf.id === newBook.id) {\n                  newBook.shelf = onShelf.shelf;\n                } else {\n                  newBook.shelf = 'none';\n                }\n              });\n            }); // After comparing show all books\n\n            this.setState({\n              searchResults: notInShelves,\n              showNothing: false\n            });\n          } // If search terms aren't met or books can't be found then show empt page.\n          else {\n              this.setState({\n                searchResults: [],\n                showNothing: true\n              });\n            }\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      changeShelf\n    } = this.props;\n    return React.createElement(\"section\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search by Title or Author\",\n      value: this.state.query,\n      onChange: this.search,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), \" \", React.createElement(\"div\", {\n      className: \"books-search-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" \", this.state.searchResults.map(book => React.createElement(Book, {\n      key: book.id,\n      book: book,\n      changeShelf: changeShelf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), \" \"), \" \");\n  }\n\n}\n\nexport default SearchOption;","map":{"version":3,"sources":["C:/Users/kmega/Desktop/MyReads-App/my-project/src/SearchOption.js"],"names":["React","Component","BooksAPI","Book","SearchOption","state","query","searchResults","showNothing","search","event","target","value","trim","setState","then","notInShelves","error","forEach","newBook","props","books","onShelf","id","shelf","render","changeShelf","map","book"],"mappings":";AAAA,OAAOA,KAAP,IACIC,SADJ,QAEO,OAFP,C,CAGA;;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CACA;;AACA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjCI,KAFiC,GAEzB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,aAAa,EAAE,EAFX;AAGJC,MAAAA,WAAW,EAAE;AAHT,KAFyB;;AAAA,SAQjCC,MARiC,GAQvBC,KAAD,IAAW;AAChB,YAAMJ,KAAK,GAAGI,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,EAAd;AACA,WAAKC,QAAL,CAAc;AACVR,QAAAA,KAAK,EAAEA;AADG,OAAd,EAFgB,CAKhB;;AACA,UAAIA,KAAJ,EAAW;AACPJ,QAAAA,QAAQ,CAACO,MAAT,CAAgBH,KAAhB,EAAuBS,IAAvB,CAA4BC,YAAY,IAAI;AACxC;AACA,cAAI,CAACA,YAAY,CAACC,KAAlB,EAAyB;AACrB;AACAD,YAAAA,YAAY,CAACE,OAAb,CAAsBC,OAAD,IAAa;AAC9B,mBAAKC,KAAL,CAAWC,KAAX,CAAiBH,OAAjB,CAA0BI,OAAD,IAAa;AAClC,oBAAIA,OAAO,CAACC,EAAR,KAAeJ,OAAO,CAACI,EAA3B,EAA+B;AAC3BJ,kBAAAA,OAAO,CAACK,KAAR,GAAgBF,OAAO,CAACE,KAAxB;AACH,iBAFD,MAEO;AACHL,kBAAAA,OAAO,CAACK,KAAR,GAAgB,MAAhB;AACH;AACJ,eAND;AAOH,aARD,EAFqB,CAWrB;;AACA,iBAAKV,QAAL,CAAc;AACVP,cAAAA,aAAa,EAAES,YADL;AAEVR,cAAAA,WAAW,EAAE;AAFH,aAAd;AAIH,WAhBD,CAiBA;AAjBA,eAkBK;AACD,mBAAKM,QAAL,CAAc;AACVP,gBAAAA,aAAa,EAAE,EADL;AAEVC,gBAAAA,WAAW,EAAE;AAFH,eAAd;AAIH;AACJ,SA1BD;AA2BH;AACJ,KA3CgC;AAAA;;AA4CjCiB,EAAAA,MAAM,GAAG;AACL,UAAM;AACFC,MAAAA;AADE,QAEF,KAAKN,KAFT;AAGA,WAAS;AACG,MAAA,SAAS,EAAG,KADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEL;AACM,MAAA,IAAI,EAAG,MADb;AAEA,MAAA,WAAW,EAAG,2BAFd;AAGA,MAAA,KAAK,EACD,KAAKf,KAAL,CAAWC,KAJf;AAMA,MAAA,QAAQ,EACJ,KAAKG,MAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,OAWF;AACC,MAAA,SAAS,EAAG,mBADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAEC,KAAKJ,KAAL,CAAWE,aAAX,CAAyBoB,GAAzB,CAA6BC,IAAI,IAAM,oBACnC,IADmC;AAC9B,MAAA,GAAG,EACJA,IAAI,CAACL,EAF0B;AAInC,MAAA,IAAI,EACAK,IAL+B;AAOnC,MAAA,WAAW,EACPF,WAR+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvC,CAFD,MAXE,MAAT;AA6BH;;AA7EgC;;AAgFrC,eAAetB,YAAf","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\n// Imported BooksAPI for search option to work.\r\nimport * as BooksAPI from './BooksAPI';\r\nimport Book from './Book';\r\n// Component responsible for searching books.\r\nclass SearchOption extends Component {\r\n    // State with user input.\r\n    state = {\r\n        query: '',\r\n        searchResults: [],\r\n        showNothing: false\r\n    }\r\n    // Search method for searching terms.\r\n    search = (event) => {\r\n        const query = event.target.value.trim()\r\n        this.setState({\r\n            query: query\r\n        })\r\n        // If user typed then start the search.\r\n        if (query) {\r\n            BooksAPI.search(query).then(notInShelves => {\r\n                // If no error occurred proceed.\r\n                if (!notInShelves.error) {\r\n                    // Compare shelves in order to display correct books.\r\n                    notInShelves.forEach((newBook) => {\r\n                        this.props.books.forEach((onShelf) => {\r\n                            if (onShelf.id === newBook.id) {\r\n                                newBook.shelf = onShelf.shelf\r\n                            } else {\r\n                                newBook.shelf = 'none'\r\n                            }\r\n                        })\r\n                    })\r\n                    // After comparing show all books\r\n                    this.setState({\r\n                        searchResults: notInShelves,\r\n                        showNothing: false\r\n                    })\r\n                }\r\n                // If search terms aren't met or books can't be found then show empt page.\r\n                else {\r\n                    this.setState({\r\n                        searchResults: [],\r\n                        showNothing: true\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const {\r\n            changeShelf\r\n        } = this.props;\r\n        return ( <\r\n            section className = 'app' >\r\n            <\r\n            input type = 'text'\r\n            placeholder = 'Search by Title or Author'\r\n            value = {\r\n                this.state.query\r\n            }\r\n            onChange = {\r\n                this.search\r\n            }\r\n            /> <\r\n            div className = 'books-search-grid' > {\r\n                this.state.searchResults.map(book => ( <\r\n                    Book key = {\r\n                        book.id\r\n                    }\r\n                    book = {\r\n                        book\r\n                    }\r\n                    changeShelf = {\r\n                        changeShelf\r\n                    }\r\n                    />\r\n                ))\r\n            } <\r\n            /div> < /\r\n            section >\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchOption;\r\n"]},"metadata":{},"sourceType":"module"}