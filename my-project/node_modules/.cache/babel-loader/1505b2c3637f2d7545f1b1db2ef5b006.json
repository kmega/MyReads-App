{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // Imported BooksAPI as suggested.\n\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Route } from \"react-router-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport BookShelf from \"./BookShelf\";\nimport SearchOption from \"./SearchOption\"; // State with all books.\n\nclass BooksApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      books: []\n    };\n\n    this.changeShelf = (targetBook, targetShelf) => {\n      BooksAPI.update(targetBook, targetShelf).then(() => {\n        targetBook.shelf = targetShelf;\n        this.setState({\n          // Place the book at respective shelf.\n          books: this.state.books.filter(t => t.id !== targetBook.id).concat(targetBook)\n        });\n      });\n    };\n  }\n\n  // Render books that are currently at shelves.\n  componentDidMount() {\n    BooksAPI.getAll().then(books => {\n      this.setState({\n        books\n      });\n    });\n  } // A function that changes shelf based on initial value.\n\n\n  render() {\n    // Currently available shelves and their names.\n    const bookStatus = [{\n      status: \"currentlyReading\",\n      statusName: \"Currently Reading\"\n    }, {\n      status: \"wantToRead\",\n      statusName: \"Want to Read\"\n    }, {\n      status: \"read\",\n      statusName: \"Read\"\n    }]; // Here application starts.\n\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"open-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"/search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \" Add a book \")), React.createElement(Router, {\n      basename: \"/my-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \" MyReads \")), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, bookStatus.map((shelf, iteration) => {\n        const books = this.state.books.filter(book => book.shelf === shelf.status);\n        return React.createElement(BookShelf, {\n          key: shelf.status,\n          books: books,\n          shelf: shelf.statusName,\n          changeShelf: this.changeShelf,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        });\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: () => React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"close-search\",\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(SearchOption, {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        books: this.state.books,\n        changeShelf: this.changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \" \"))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BooksApp;","map":{"version":3,"sources":["C:/Users/kmega/Desktop/MyReads-App/my-project/src/App.js"],"names":["React","BooksAPI","Route","HashRouter","Router","BookShelf","SearchOption","BooksApp","Component","state","books","changeShelf","targetBook","targetShelf","update","then","shelf","setState","filter","t","id","concat","componentDidMount","getAll","render","bookStatus","status","statusName","map","iteration","book"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n// Imported BooksAPI as suggested.\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport BookShelf from \"./BookShelf\";\r\nimport SearchOption from \"./SearchOption\";\r\n// State with all books.\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: []\r\n  };\r\n  // Render books that are currently at shelves.\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then(books => {\r\n      this.setState({\r\n        books\r\n      });\r\n    });\r\n  }\r\n  // A function that changes shelf based on initial value.\r\n  changeShelf = (targetBook, targetShelf) => {\r\n    BooksAPI.update(targetBook, targetShelf).then(() => {\r\n      targetBook.shelf = targetShelf;\r\n      this.setState({\r\n        // Place the book at respective shelf.\r\n        books: this.state.books\r\n          .filter(t => t.id !== targetBook.id)\r\n          .concat(targetBook)\r\n      });\r\n    });\r\n  };\r\n  render() {\r\n    // Currently available shelves and their names.\r\n    const bookStatus = [\r\n      {\r\n        status: \"currentlyReading\",\r\n        statusName: \"Currently Reading\"\r\n      },\r\n      {\r\n        status: \"wantToRead\",\r\n        statusName: \"Want to Read\"\r\n      },\r\n      {\r\n        status: \"read\",\r\n        statusName: \"Read\"\r\n      }\r\n    ];\r\n    // Here application starts.\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"open-search\">\r\n          <a href=\"/search\"> Add a book </a>\r\n        </div>\r\n        {/* Creating main route for rendering purposes. */}\r\n        <Router basename=\"/my-project\">\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <div className=\"list-books\">\r\n                <div className=\"list-books-title\">\r\n                  <h1> MyReads </h1>\r\n                </div>\r\n                <div className=\"list-books-content\">\r\n\r\n                  {/* Render books that initially are at begining. */}\r\n                  <div>\r\n\r\n                    {bookStatus.map((shelf, iteration) => {\r\n                      const books = this.state.books.filter(\r\n                        book => book.shelf === shelf.status\r\n                      );\r\n                      return (\r\n                        <BookShelf\r\n                          key={shelf.status}\r\n                          books={books}\r\n                          shelf={shelf.statusName}\r\n                          changeShelf={this.changeShelf}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          />\r\n        </Router>\r\n        {/* Creating search route for rendering purposes. */}\r\n        <Route\r\n          exact\r\n          path=\"/search\"\r\n          render={() => (\r\n            <div className=\"search-books\">\r\n              <div className=\"search-books-bar\">\r\n                <a className=\"close-search\" href=\"/\">\r\n\r\n                  Close\r\n                </a>\r\n                <div className=\"search-books-input-wrapper\">\r\n                  <SearchOption\r\n                    type=\"text\"\r\n                    placeholder=\"Search by title or author\"\r\n                    books={this.state.books}\r\n                    changeShelf={this.changeShelf}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"search-books-results\">\r\n                <ol className=\"books-grid\"> </ol>\r\n              </div>\r\n            </div>\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n"]},"metadata":{},"sourceType":"module"}