{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";// Imported BooksAPI for search option to work.\nimport*as BooksAPI from\"./BooksAPI\";import Book from\"./Book\";// Component responsible for searching books.\nvar SearchOption=/*#__PURE__*/function(_Component){_inherits(SearchOption,_Component);function SearchOption(){var _getPrototypeOf2;var _this;_classCallCheck(this,SearchOption);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(SearchOption)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={query:\"\",searchResults:[],showNothing:false};_this.search=function(event){var query=event.target.value.trim();_this.setState({query:query});// If user typed then start the search.\nif(query){BooksAPI.search(query).then(function(notInShelves){// If no error occurred proceed.\nif(!notInShelves.error){// Compare shelves in order to display correct books.\nnotInShelves.forEach(function(newBook){_this.props.books.forEach(function(onShelf){if(onShelf.id===newBook.id){newBook.shelf=onShelf.shelf;}else{newBook.shelf=\"none\";}});});// After comparing show all books\n_this.setState({searchResults:notInShelves,showNothing:false});}// If search terms aren't met or books can't be found then show empt page.\nelse{_this.setState({searchResults:[],showNothing:true});}});}};return _this;}_createClass(SearchOption,[{key:\"render\",value:function render(){var changeShelf=this.props.changeShelf;return React.createElement(\"section\",{className:\"app\"},React.createElement(\"input\",{type:\"text\",placeholder:\"Search by Title or Author\",value:this.state.query,onChange:this.search}),\" \",React.createElement(\"div\",{className:\"books-search-grid\"},\" \",this.state.searchResults.map(function(book){return React.createElement(Book,{key:book.id,book:book,changeShelf:changeShelf});}),\" \"),\" \");}}]);return SearchOption;}(Component);export default SearchOption;","map":{"version":3,"sources":["C:/Users/kmega/Desktop/MyReads-App/my-project/src/SearchOption.js"],"names":["React","Component","BooksAPI","Book","SearchOption","state","query","searchResults","showNothing","search","event","target","value","trim","setState","then","notInShelves","error","forEach","newBook","props","books","onShelf","id","shelf","changeShelf","map","book"],"mappings":"srBAAA,MAAOA,CAAAA,KAAP,EACIC,SADJ,KAEO,OAFP,CAGA;AACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,YAA1B,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA;GACMC,CAAAA,Y,uZAEFC,K,CAAQ,CACJC,KAAK,CAAE,EADH,CAEJC,aAAa,CAAE,EAFX,CAGJC,WAAW,CAAE,KAHT,C,OAMRC,M,CAAS,SAACC,KAAD,CAAW,CAChB,GAAMJ,CAAAA,KAAK,CAAGI,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,EAAd,CACA,MAAKC,QAAL,CAAc,CACVR,KAAK,CAAEA,KADG,CAAd,EAGA;AACA,GAAIA,KAAJ,CAAW,CACPJ,QAAQ,CAACO,MAAT,CAAgBH,KAAhB,EAAuBS,IAAvB,CAA4B,SAAAC,YAAY,CAAI,CACxC;AACA,GAAI,CAACA,YAAY,CAACC,KAAlB,CAAyB,CACrB;AACAD,YAAY,CAACE,OAAb,CAAqB,SAACC,OAAD,CAAa,CAC9B,MAAKC,KAAL,CAAWC,KAAX,CAAiBH,OAAjB,CAAyB,SAACI,OAAD,CAAa,CAClC,GAAIA,OAAO,CAACC,EAAR,GAAeJ,OAAO,CAACI,EAA3B,CAA+B,CAC3BJ,OAAO,CAACK,KAAR,CAAgBF,OAAO,CAACE,KAAxB,CACH,CAFD,IAEO,CACHL,OAAO,CAACK,KAAR,CAAgB,MAAhB,CACH,CACJ,CAND,EAOH,CARD,EASA;AACA,MAAKV,QAAL,CAAc,CACVP,aAAa,CAAES,YADL,CAEVR,WAAW,CAAE,KAFH,CAAd,EAIH,CACD;AAjBA,IAkBK,CACD,MAAKM,QAAL,CAAc,CACVP,aAAa,CAAE,EADL,CAEVC,WAAW,CAAE,IAFH,CAAd,EAIH,CACJ,CA1BD,EA2BH,CACJ,C,+EACQ,IAEDiB,CAAAA,WAFC,CAGD,KAAKL,KAHJ,CAEDK,WAFC,CAIL,MAAS,gCACG,SAAS,CAAG,KADf,EAEL,6BACM,IAAI,CAAG,MADb,CAEA,WAAW,CAAG,2BAFd,CAGA,KAAK,CACD,KAAKpB,KAAL,CAAWC,KAJf,CAMA,QAAQ,CACJ,KAAKG,MAPT,EAFK,KAWF,2BACC,SAAS,CAAG,mBADb,MAEC,KAAKJ,KAAL,CAAWE,aAAX,CAAyBmB,GAAzB,CAA6B,SAAAC,IAAI,QAAM,qBACnC,IADmC,EAC9B,GAAG,CACJA,IAAI,CAACJ,EAF0B,CAInC,IAAI,CACAI,IAL+B,CAOnC,WAAW,CACPF,WAR+B,EAAN,EAAjC,CAFD,KAXE,KAAT,CA6BH,C,0BA7EsBxB,S,EAgF3B,cAAeG,CAAAA,YAAf","sourcesContent":["import React, {\r\n    Component\r\n} from \"react\";\r\n// Imported BooksAPI for search option to work.\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Book from \"./Book\";\r\n// Component responsible for searching books.\r\nclass SearchOption extends Component {\r\n    // State with user input.\r\n    state = {\r\n        query: \"\",\r\n        searchResults: [],\r\n        showNothing: false\r\n    }\r\n    // Search method for searching terms.\r\n    search = (event) => {\r\n        const query = event.target.value.trim()\r\n        this.setState({\r\n            query: query\r\n        })\r\n        // If user typed then start the search.\r\n        if (query) {\r\n            BooksAPI.search(query).then(notInShelves => {\r\n                // If no error occurred proceed.\r\n                if (!notInShelves.error) {\r\n                    // Compare shelves in order to display correct books.\r\n                    notInShelves.forEach((newBook) => {\r\n                        this.props.books.forEach((onShelf) => {\r\n                            if (onShelf.id === newBook.id) {\r\n                                newBook.shelf = onShelf.shelf\r\n                            } else {\r\n                                newBook.shelf = \"none\"\r\n                            }\r\n                        })\r\n                    })\r\n                    // After comparing show all books\r\n                    this.setState({\r\n                        searchResults: notInShelves,\r\n                        showNothing: false\r\n                    })\r\n                }\r\n                // If search terms aren't met or books can't be found then show empt page.\r\n                else {\r\n                    this.setState({\r\n                        searchResults: [],\r\n                        showNothing: true\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const {\r\n            changeShelf\r\n        } = this.props;\r\n        return ( <\r\n            section className = \"app\" >\r\n            <\r\n            input type = \"text\"\r\n            placeholder = \"Search by Title or Author\"\r\n            value = {\r\n                this.state.query\r\n            }\r\n            onChange = {\r\n                this.search\r\n            }\r\n            /> <\r\n            div className = \"books-search-grid\" > {\r\n                this.state.searchResults.map(book => ( <\r\n                    Book key = {\r\n                        book.id\r\n                    }\r\n                    book = {\r\n                        book\r\n                    }\r\n                    changeShelf = {\r\n                        changeShelf\r\n                    }\r\n                    />\r\n                ))\r\n            } <\r\n            /div> < /\r\n            section >\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchOption;\r\n"]},"metadata":{},"sourceType":"module"}