{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\src\\\\App.js\";\nimport React from \"react\";\nimport \"./App.css\"; // Imported BooksAPI as suggested.\n\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Route } from \"react-router-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport BookShelf from \"./BookShelf\";\nimport SearchOption from \"./SearchOption\"; // State with all books.\n\nclass BooksApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      books: []\n    };\n\n    this.changeShelf = (targetBook, targetShelf) => {\n      BooksAPI.update(targetBook, targetShelf).then(() => {\n        targetBook.shelf = targetShelf;\n        this.setState({\n          // Place the book at respective shelf.\n          books: this.state.books.filter(t => t.id !== targetBook.id).concat(targetBook)\n        });\n      });\n    };\n  }\n\n  // Render books that are currently at shelves.\n  componentDidMount() {\n    BooksAPI.getAll().then(books => {\n      this.setState({\n        books\n      });\n    });\n  } // A function that changes shelf based on initial value.\n\n\n  render() {\n    // Currently available shelves and their names.\n    const bookStatus = [{\n      status: \"currentlyReading\",\n      statusName: \"Currently Reading\"\n    }, {\n      status: \"wantToRead\",\n      statusName: \"Want to Read\"\n    }, {\n      status: \"read\",\n      statusName: \"Read\"\n    }]; // Here application starts.\n\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"open-search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"/search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" Add a book \")), \" \", React.createElement(Router, {\n      basename: \"/my-project\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: () => React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \" MyReads \"), \" \"), \" \", React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \" \", \" \", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" \", bookStatus.map((shelf, iteration) => {\n        const books = this.state.books.filter(book => book.shelf === shelf.status);\n        return React.createElement(BookShelf, {\n          key: shelf.status,\n          books: books,\n          shelf: shelf.statusName,\n          changeShelf: this.changeShelf,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        });\n      }), \" \"), \" \"), \" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(Router, {\n      basename: \"/SearchOption\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/search\",\n      render: () => React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"close-search\",\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \" Close \"), \" \", React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(SearchOption, {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        books: this.state.books,\n        changeShelf: this.changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), \" \"), \" \"), \" \", React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"ol\", {\n        className: \"books-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \" \"), \" \"), \" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default BooksApp;","map":{"version":3,"sources":["C:/Users/kmega/Desktop/MyReads-App/my-project/src/App.js"],"names":["React","BooksAPI","Route","HashRouter","Router","BookShelf","SearchOption","BooksApp","Component","state","books","changeShelf","targetBook","targetShelf","update","then","shelf","setState","filter","t","id","concat","componentDidMount","getAll","render","bookStatus","status","statusName","map","iteration","book"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\n// Imported BooksAPI as suggested.\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport BookShelf from \"./BookShelf\";\r\nimport SearchOption from \"./SearchOption\";\r\n// State with all books.\r\nclass BooksApp extends React.Component {\r\n    state = {\r\n        books: []\r\n    }\r\n    // Render books that are currently at shelves.\r\n    componentDidMount() {\r\n        BooksAPI.getAll().then((books) => {\r\n            this.setState({\r\n                books\r\n            });\r\n        })\r\n    }\r\n    // A function that changes shelf based on initial value.\r\n    changeShelf = (targetBook, targetShelf) => {\r\n        BooksAPI.update(targetBook, targetShelf).then(() => {\r\n            targetBook.shelf = targetShelf\r\n            this.setState({\r\n                // Place the book at respective shelf.\r\n                books: this.state.books.filter((t) => t.id !== targetBook.id).concat(targetBook)\r\n            })\r\n        })\r\n    }\r\n    render() {\r\n        // Currently available shelves and their names.\r\n        const bookStatus = [{\r\n                status: \"currentlyReading\",\r\n                statusName: \"Currently Reading\"\r\n            },\r\n            {\r\n                status: \"wantToRead\",\r\n                statusName: \"Want to Read\"\r\n            },\r\n            {\r\n                status: \"read\",\r\n                statusName: \"Read\"\r\n            }\r\n        ];\r\n        // Here application starts.\r\n        return ( <\r\n            div className = \"app\" >\r\n            <\r\n            div className = \"open-search\" >\r\n            <\r\n            a href = \"/search\" > Add a book < /a>\r\n\t\t\t\t\t\t< /div> { /* Creating main route for rendering purposes. */ }\r\n            <Router basename = \"/my-project\">\r\n            <Route exact path = \"/\"\r\n            render = {\r\n                () => ( <\r\n                    div className = \"list-books\" >\r\n                    <\r\n                    div className = \"list-books-title\" >\r\n                    <\r\n                    h1 > MyReads < /h1> <\r\n                    /div> <\r\n                    div className = \"list-books-content\" > { /* Render books that initially are at begining. */ } <\r\n                    div > {\r\n                        bookStatus.map((shelf, iteration) => {\r\n                            const books = this.state.books.filter(book => book.shelf === shelf.status)\r\n                            return ( <\r\n                                BookShelf key = {\r\n                                    shelf.status\r\n                                }\r\n                                books = {\r\n                                    books\r\n                                }\r\n                                shelf = {\r\n                                    shelf.statusName\r\n                                }\r\n                                changeShelf = {\r\n                                    this.changeShelf\r\n                                }\r\n                                />\r\n                            );\r\n                        })\r\n                    } < /div> <\r\n                    /div> <\r\n                    /div>\r\n                )\r\n            }/>\r\n            </Router>\r\n            { /* Creating search route for rendering purposes. */ }\r\n            <Router basename = \"/SearchOption\">\r\n            <Route exact path = \"/search\"\r\n            render = {\r\n                () => ( <\r\n                    div className = \"search-books\" >\r\n                    <\r\n                    div className = \"search-books-bar\" >\r\n                    <\r\n                    a className = \"close-search\"\r\n                    href = \"/\" > Close < /a> <\r\n                    div className = \"search-books-input-wrapper\" >\r\n                    <\r\n                    SearchOption type = \"text\"\r\n                    placeholder = \"Search by title or author\"\r\n\t\t\t\t\t\t\t\t\t\tbooks = {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.state.books\r\n\t\t\t\t\t\t\t\t\t\t}\r\n                    changeShelf = {\r\n                        this.changeShelf\r\n                    }\r\n                    /> <\r\n                    /div> <\r\n                    /div> <\r\n                    div className = \"search-books-results\" >\r\n                    <\r\n                    ol className = \"books-grid\" > < /ol> <\r\n                    /div> <\r\n                    /div>\r\n                )\r\n            }\r\n            />\r\n            </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BooksApp\r\n"]},"metadata":{},"sourceType":"module"}