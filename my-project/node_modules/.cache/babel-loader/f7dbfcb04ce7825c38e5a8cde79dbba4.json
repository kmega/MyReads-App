{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"C:\\\\Users\\\\kmega\\\\Desktop\\\\MyReads-App\\\\my-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";// Imported BooksAPI for search option to work.\nimport*as BooksAPI from\"./BooksAPI\";import Book from\"./Book\";// Component responsible for searching books.\nvar SearchOption=/*#__PURE__*/function(_Component){_inherits(SearchOption,_Component);function SearchOption(){var _getPrototypeOf2;var _this;_classCallCheck(this,SearchOption);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(SearchOption)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={query:\"\",searchResults:[],showNothing:false};_this.search=function(event){var query=event.target.value.trim();_this.setState({query:query});// If user typed then start the search.\nif(query){BooksAPI.search(query).then(function(notInShelves){// If no error occurred proceed.\nif(!notInShelves.error){// Compare shelves in order to display correct books.\nnotInShelves.forEach(function(newBook){_this.props.books.forEach(function(onShelf){if(onShelf.id===newBook.id){newBook.shelf=onShelf.shelf;}else{newBook.shelf=\"none\";}});});// After comparing show all books\n_this.setState({searchResults:notInShelves,showNothing:false});}// If search terms aren't met or books can't be found then show empty page.\nelse{_this.setState({searchResults:[],showNothing:true});}});}};return _this;}_createClass(SearchOption,[{key:\"render\",value:function render(){var changeShelf=this.props.changeShelf;return React.createElement(\"section\",{className:\"app\"},React.createElement(\"input\",{type:\"text\",placeholder:\"Search by Title or Author\",value:this.state.query,onChange:this.search}),React.createElement(\"div\",{className:\"books-search-grid\"},this.state.searchResults.map(function(book){return React.createElement(Book,{key:book.id,book:book,changeShelf:changeShelf});})));}}]);return SearchOption;}(Component);export default SearchOption;","map":{"version":3,"sources":["C:/Users/kmega/Desktop/MyReads-App/my-project/src/SearchOption.js"],"names":["React","Component","BooksAPI","Book","SearchOption","state","query","searchResults","showNothing","search","event","target","value","trim","setState","then","notInShelves","error","forEach","newBook","props","books","onShelf","id","shelf","changeShelf","map","book"],"mappings":"srBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA;AACA,MAAO,GAAKC,CAAAA,QAAZ,KAA0B,YAA1B,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA;GACMC,CAAAA,Y,uZAEJC,K,CAAQ,CACNC,KAAK,CAAE,EADD,CAENC,aAAa,CAAE,EAFT,CAGNC,WAAW,CAAE,KAHP,C,OAMRC,M,CAAS,SAAAC,KAAK,CAAI,CAChB,GAAMJ,CAAAA,KAAK,CAAGI,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,EAAd,CACA,MAAKC,QAAL,CAAc,CACZR,KAAK,CAAEA,KADK,CAAd,EAGA;AACA,GAAIA,KAAJ,CAAW,CACTJ,QAAQ,CAACO,MAAT,CAAgBH,KAAhB,EAAuBS,IAAvB,CAA4B,SAAAC,YAAY,CAAI,CAC1C;AACA,GAAI,CAACA,YAAY,CAACC,KAAlB,CAAyB,CACvB;AACAD,YAAY,CAACE,OAAb,CAAqB,SAAAC,OAAO,CAAI,CAC9B,MAAKC,KAAL,CAAWC,KAAX,CAAiBH,OAAjB,CAAyB,SAAAI,OAAO,CAAI,CAClC,GAAIA,OAAO,CAACC,EAAR,GAAeJ,OAAO,CAACI,EAA3B,CAA+B,CAC7BJ,OAAO,CAACK,KAAR,CAAgBF,OAAO,CAACE,KAAxB,CACD,CAFD,IAEO,CACLL,OAAO,CAACK,KAAR,CAAgB,MAAhB,CACD,CACF,CAND,EAOD,CARD,EASA;AACA,MAAKV,QAAL,CAAc,CACZP,aAAa,CAAES,YADH,CAEZR,WAAW,CAAE,KAFD,CAAd,EAID,CACD;AAjBA,IAkBK,CACH,MAAKM,QAAL,CAAc,CACZP,aAAa,CAAE,EADH,CAEZC,WAAW,CAAE,IAFD,CAAd,EAID,CACF,CA1BD,EA2BD,CACF,C,+EACQ,IACCiB,CAAAA,WADD,CACiB,KAAKL,KADtB,CACCK,WADD,CAEP,MACE,gCAAS,SAAS,CAAC,KAAnB,EACE,6BACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,2BAFd,CAGE,KAAK,CAAE,KAAKpB,KAAL,CAAWC,KAHpB,CAIE,QAAQ,CAAE,KAAKG,MAJjB,EADF,CAOE,2BAAK,SAAS,CAAC,mBAAf,EAEG,KAAKJ,KAAL,CAAWE,aAAX,CAAyBmB,GAAzB,CAA6B,SAAAC,IAAI,QAChC,qBAAC,IAAD,EAAM,GAAG,CAAEA,IAAI,CAACJ,EAAhB,CAAoB,IAAI,CAAEI,IAA1B,CAAgC,WAAW,CAAEF,WAA7C,EADgC,EAAjC,CAFH,CAPF,CADF,CAgBD,C,0BA9DwBxB,S,EAiE3B,cAAeG,CAAAA,YAAf","sourcesContent":["import React, { Component } from \"react\";\r\n// Imported BooksAPI for search option to work.\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Book from \"./Book\";\r\n// Component responsible for searching books.\r\nclass SearchOption extends Component {\r\n  // State with user input.\r\n  state = {\r\n    query: \"\",\r\n    searchResults: [],\r\n    showNothing: false\r\n  };\r\n  // Search method for searching terms.\r\n  search = event => {\r\n    const query = event.target.value.trim();\r\n    this.setState({\r\n      query: query\r\n    });\r\n    // If user typed then start the search.\r\n    if (query) {\r\n      BooksAPI.search(query).then(notInShelves => {\r\n        // If no error occurred proceed.\r\n        if (!notInShelves.error) {\r\n          // Compare shelves in order to display correct books.\r\n          notInShelves.forEach(newBook => {\r\n            this.props.books.forEach(onShelf => {\r\n              if (onShelf.id === newBook.id) {\r\n                newBook.shelf = onShelf.shelf;\r\n              } else {\r\n                newBook.shelf = \"none\";\r\n              }\r\n            });\r\n          });\r\n          // After comparing show all books\r\n          this.setState({\r\n            searchResults: notInShelves,\r\n            showNothing: false\r\n          });\r\n        }\r\n        // If search terms aren't met or books can't be found then show empty page.\r\n        else {\r\n          this.setState({\r\n            searchResults: [],\r\n            showNothing: true\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { changeShelf } = this.props;\r\n    return (\r\n      <section className=\"app\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search by Title or Author\"\r\n          value={this.state.query}\r\n          onChange={this.search}\r\n        />\r\n        <div className=\"books-search-grid\">\r\n\r\n          {this.state.searchResults.map(book => (\r\n            <Book key={book.id} book={book} changeShelf={changeShelf} />\r\n          ))}\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchOption;\r\n"]},"metadata":{},"sourceType":"module"}